//
//
//
//

#include <iostream>
#include <cstring>

//#include "compress_fxe0.h"
#include "headers.h"
#include "bitutils.h"
#include "fio.h"

//
//
//



//

namespace Headers {

	unsigned char fxe[FXE_HEADER_SIZE];			// magic number :)


	//
	// Build FXE header..
	//
	// I use prebuild binary and do not build the header manually. Check
	// e.g. b2fxe source how to create one.
	//
	//
  
	int saveFXEHeader( int type, FWriter* w, char *title, char *author, char* bmpfile, char *rawfile, char* icondata ) {
		memcpy(fxe,FXEheader,FXE_HEADER_SIZE);
		if (title) { strncpy(reinterpret_cast<char *>(fxe+FXE_TITLE_POS),title,32); }
		if (author) { strncpy(reinterpret_cast<char *>(fxe+FXE_AUTHOR_POS),author,32); }
	
		if (icondata) {
			memcpy(fxe+FXE_ICON_POS,icondata,1024);
		}
		if (bmpfile) {
			// this code is originally from b2fxe by Jeff F.

#define BMP_HDR_SIZE 34

			unsigned char bmp[BMP_HDR_SIZE];
			unsigned char* p;
			unsigned short i,j;
			long offset;

			FReader r(bmpfile,IO_READ);

			if (!r.isOpen()) {
				cerr << "** Error opening BMP file '" << bmpfile << "'.." << endl;
				return -1;
			}
			if (r.read(bmp,BMP_HDR_SIZE) != BMP_HDR_SIZE) {
				cerr << "** Error reading BMP file header.." << endl;
				r.close();
				return -1;
			}

			p = bmp;
			GETW_LE(p,i);

			if (i != 0x4d42) {
				cerr << "** Error: Not a BMP file.." << endl;
				r.close();
				return -1;
			}

			p += 8;
			GETL_LE(p,offset);
			p += 4;
			GETL_LE(p,i);
			GETL_LE(p,j);

			if ((i != 32) || (j != 32)) {
				cerr << "** Error: BMP must be exactly 32x32 pixels.." << endl;
				r.close();
				return -1;
			}

			p += 2;
			GETW_LE(p,i);
			
			if (i != 8) {
				cerr << "** Error: BMP must have a color depth of 256 colors/8 bits" << endl;
				cerr << i << endl;
				r.close();
				return -1;
			}

			GETL_LE(p,i);
			
			if (i != 0) {
				cerr << "** Error: BMP must be uncompressed.." << endl;
				r.close();
				return -1;
			}

			r.seek(offset-BMP_HDR_SIZE,IO_SEEK_CUR);
			p = fxe+FXE_ICON_POS;

			for (j=0; j<32; j++) {
				for (i=0; i<32; i++) {
					if (r.read(&p[(i<<5)+j],1) != 1) {
						cerr << "** Error reading BMP file datas.." << endl;
						r.close();
						return -1;
					}
				}
			}
			r.close();
		}
		if (rawfile) {
			FReader r(rawfile,IO_READ);

			if (!r.isOpen()) {
				cerr << "** Error opening RAW icon file '" << rawfile << "'.." << endl;
				return -1;
			}
			if (r.read(fxe+FXE_ICON_POS,1024) != 1024) {
				cerr << "** Error reading RAW icon file datas.." << endl;
				r.close();
				return -1;
			}
			r.close();
		}
		if (w->write(fxe,FXE_HEADER_SIZE) != FXE_HEADER_SIZE) {
			cerr << "** Error writing FXE header.." << endl;
			return -1;
		}

		//

		return FXE_HEADER_SIZE;
	}
  
	int fixFXEHeader( int type, FWriter* w, long size ) {
		unsigned char b[4];
		unsigned char* p = b;

		w->seek(FXE_TOTALFILESIZE_POS,IO_SEEK_SET);
		PUTL_LE(p,size);
		
		if (w->write(b,4) != 4) {
			cerr << "** Error fixing FXE header (1).." << endl;
			return -1;
		}

		p = b;
		w->seek(FXE_FILESIZE_POS,IO_SEEK_SET);
		PUTL_LE(p,size);
		
		if (w->write(b,4) != 4) {
			cerr << "** Error fixing FXE header (2).." << endl;
			return -1;
		}

		return 0;
	}

	//
	//
	//
	
	int saveFXE0Header( FWriter* w ) {
		return w->write(fxe0_crt0_bin,FXE0_CRT0_SIZE);
	}
	
	int fixFXE0Header( FWriter* w, long offset, const fixInfo* fix ) {
		long dataStart;
		unsigned char b[4*19];
		unsigned char* p = fxe0_crt0_bin + FXE0_FIX_DATASTART_POS;

		GETL_LE(p,dataStart);			// start of data section i.e. crunched data
		memcpy(b,p,4*19);
		p = b;
#if 0
		PUTL_LE(p,dataStart+fix->csize+fix->osize+8);	// end of bss section
		PUTL_LE(p,dataStart+fix->csize);		// start of bss data section (i.e. end of data)
		PUTL_LE(p,dataStart+fix->csize+fix->osize+8);	// end of bss section
#else
		// these are for new large file decompression support.. i.e. no bss used anymore

		PUTL_LE(p,dataStart+fix->csize+8);	// end of bss section
		PUTL_LE(p,dataStart+fix->csize);		// start of bss data section (i.e. end of data)
		PUTL_LE(p,dataStart+fix->csize+8);	// end of bss section
#endif
		// Fix gap
	
		p += 24;

		if (fix->gap > 0) {
			PUTL_LE(p,fix->gap);	// end of bss section
		} else {
			PUTL_LE(p,dataStart);	// end of bss section
		}

		// clock speed

		PUTL_LE(p,fix->mhz);
		PUTL_LE(p,fix->fac);		

		// check something..

		//if ((dataStart + fix->csize+fix->osize + 8) > 0xc780000) {
		if ((dataStart + fix->osize + 8) > 0xc780000) {
			cerr << "++ Warning - Crunched file is oversized and might not run correctly!" << endl;
		}

		//

		w->seek(FXE0_FIX_DATAEND_POS+offset,IO_SEEK_SET);
		return w->write(b,4*19);
	} 

//////////////////////////////////////////////////////////////////////////////
//
//
//
//
//
//
//
//
//
//
//////////////////////////////////////////////////////////////////////////////
	
	int saveFXE3Header( FWriter* w ) {
		return w->write(fxe3_crt0_bin,FXE3_CRT0_SIZE);
	}
	
//////////////////////////////////////////////////////////////////////////////
//
//
//
//
//
//
//
//
//
//
//////////////////////////////////////////////////////////////////////////////

	int fixFXE3Header( FWriter* w, long offset, const fixInfo* fix ) {
		long dataStart;
		unsigned char b[4*19];
		unsigned char* p = fxe3_crt0_bin + FXE3_FIX_DATASTART_POS;


		GETL_LE(p,dataStart);			// start of data section i.e. crunched data
		memcpy(b,p,4*19);
		p = b;
		//PUTL_LE(p,dataStart+fix->csize+fix->osize+8);	// end of bss section
		//PUTL_LE(p,dataStart+fix->csize);		// start of bss data section (i.e. end of data)
		//PUTL_LE(p,dataStart+fix->csize+fix->osize+8);	// end of bss section

		// these are for new large file decompression support.. i.e. no bss used anymore

		PUTL_LE(p,dataStart+fix->csize+8);	// end of bss section
		PUTL_LE(p,dataStart+fix->csize);		// start of bss data section (i.e. end of data)
		PUTL_LE(p,dataStart+fix->csize+8);	// end of bss section

		// Fix gap
	
		p += 24;

		if (fix->gap > 0) {
			PUTL_LE(p,fix->gap);	// end of bss section
		} else {
			PUTL_LE(p,dataStart);	// end of bss section
		}

		// clock speed

		PUTL_LE(p,fix->mhz);
		PUTL_LE(p,fix->fac);

		// flash stuff

		//PUTL_LE(p,fix->flash);		
		
		// check something..

		//if ((dataStart + fix->csize + fix->osize + 8) > 0xc780000) {
		if ((dataStart + fix->osize + 8) > 0xc780000) {
			cerr << "++ Warning - Crunched file is oversized and might not run correctly!" << endl;
		}

		//

		w->seek(FXE3_FIX_DATAEND_POS+offset,IO_SEEK_SET);
		return w->write(b,4*19);
	} 


//////////////////////////////////////////////////////////////////////////////
//
//
//
//
//
//
//
//
//
//
//////////////////////////////////////////////////////////////////////////////
	
	int saveFXE2Header( FWriter* w ) {
		return w->write(fxe2_crt0_bin,FXE2_CRT0_SIZE);
	}
	
//////////////////////////////////////////////////////////////////////////////
//
//
//
//
//
//
//
//
//
//
//////////////////////////////////////////////////////////////////////////////

	int fixFXE2Header( FWriter* w, long offset, const fixInfo* fix ) {
		long dataStart;
		unsigned char b[4*19];
		unsigned char* p = fxe2_crt0_bin + FXE2_FIX_DATASTART_POS;


		GETL_LE(p,dataStart);			// start of data section i.e. crunched data
		memcpy(b,p,4*19);
		p = b;
		//PUTL_LE(p,dataStart+fix->csize+fix->osize+8);	// end of bss section
		//PUTL_LE(p,dataStart+fix->csize);		// start of bss data section (i.e. end of data)
		//PUTL_LE(p,dataStart+fix->csize+fix->osize+8);	// end of bss section

		// these are for new large file decompression support.. i.e. no bss used anymore

		PUTL_LE(p,dataStart+fix->csize+8);	// end of bss section
		PUTL_LE(p,dataStart+fix->csize);		// start of bss data section (i.e. end of data)
		PUTL_LE(p,dataStart+fix->csize+8);	// end of bss section

		// Fix gap
	
		p += 24;

		if (fix->gap > 0) {
			PUTL_LE(p,fix->gap);	// end of bss section
		} else {
			PUTL_LE(p,dataStart);	// end of bss section
		}

		// clock speed

		PUTL_LE(p,fix->mhz);
		PUTL_LE(p,fix->fac);

		// flash stuff

		//PUTL_LE(p,fix->flash);		
		
		// check something..

		//if ((dataStart + fix->csize + fix->osize + 8) > 0xc780000) {
		if ((dataStart + fix->osize + 8) > 0xc780000) {
			cerr << "++ Warning - Crunched file is oversized and might not run correctly!" << endl;
		}

		//

		w->seek(FXE2_FIX_DATAEND_POS+offset,IO_SEEK_SET);
		return w->write(b,4*19);
	} 


	//
	//
	//
	//

	unsigned char fxe0_crt0_bin [FXE0_CRT0_SIZE] = {	// 452
 0x0e,0x00,0x00,0xea,0x00,0x00,0x00,0x0c,
 0xe8,0x01,0x00,0x0c,0xe8,0x01,0x00,0x0c,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x11,0x00,0x45,0x44,
 0x11,0x00,0x45,0x44,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x10,0x00,0x1f,0xe5,0x10,0x10,0x1f,0xe5,
 0x03,0x20,0xa0,0xe3,0x07,0x00,0x2d,0xe9,
 0x0d,0x00,0xa0,0xe1,0x00,0x00,0x51,0xe3,
 0x0d,0x00,0x00,0x1f,0x05,0x00,0xa0,0xe3,
 0x0b,0x00,0x00,0xef,0x03,0xc0,0xc0,0xe3,
 0x64,0xb0,0x1f,0xe5,0x60,0x90,0x1f,0xe5,
 0x0b,0xb0,0x49,0xe0,0x04,0xa0,0x39,0xe5,
 0x04,0xb0,0x5b,0xe2,0x04,0xa0,0x2c,0x15,
 0xfb,0xff,0xff,0x1a,0x58,0x90,0x1f,0xe5,
 0x04,0x00,0x9c,0xe4,0x04,0x00,0x89,0xe4,
 0x01,0x00,0xdc,0xe4,0x01,0x10,0xdc,0xe4,
 0x01,0x20,0x00,0xe0,0x01,0x04,0x80,0xe0,
 0xff,0x00,0x52,0xe3,0x42,0x00,0x00,0x0a,
 0x02,0x89,0xc0,0xe3,0x08,0x00,0x50,0xe1,
 0x04,0x00,0x00,0x1a,0x01,0x00,0xdc,0xe4,
 0x01,0x80,0x58,0xe2,0x01,0x00,0xc9,0xe4,
 0xfb,0xff,0xff,0x1a,0xf1,0xff,0xff,0xea,
 0x08,0x70,0x8c,0xe0,0x01,0xb0,0xdc,0xe4,
 0x08,0xa0,0xa0,0xe3,0x01,0x20,0xdc,0xe4,
 0x2a,0x00,0x00,0xeb,0x01,0x20,0xc9,0x14,
 0x25,0x00,0x00,0x1a,0x05,0x30,0xa0,0xe3,
 0x01,0x4c,0xa0,0xe3,0x01,0x50,0xa0,0xe3,
 0x24,0x00,0x00,0xeb,0x03,0x00,0x00,0x1a,
 0x04,0x50,0x85,0xe0,0x01,0x30,0x53,0xe2,
 0x04,0x40,0x84,0xe0,0xf9,0xff,0xff,0x1a,
 0x05,0x10,0x73,0xe2,0x12,0x21,0xa0,0x11,
 0x1d,0x00,0x00,0x1b,0x00,0x20,0x82,0x10,
 0x05,0x50,0x82,0xe0,0x02,0x10,0xa0,0xe3,
 0x19,0x00,0x00,0xeb,0x01,0x00,0x50,0xe3,
 0x0f,0x00,0x00,0x8a,0x02,0x10,0xa0,0xe3,
 0x04,0x00,0x00,0x0a,0x14,0x00,0x00,0xeb,
 0x06,0x00,0x00,0x0a,0x02,0x00,0x50,0xe3,
 0x02,0x10,0xa0,0x23,0x04,0x10,0xa0,0x33,
 0x10,0x21,0xa0,0xe1,0x0e,0x00,0x00,0xeb,
 0x02,0x00,0x80,0xe1,0x04,0x00,0x00,0xea,
 0x20,0x00,0xa0,0xe3,0x01,0x10,0xdc,0xe4,
 0x01,0x00,0x80,0xe0,0xff,0x00,0x51,0xe3,
 0xfb,0xff,0xff,0x0a,0x05,0x10,0x59,0xe7,
 0x01,0x00,0x50,0xe2,0x01,0x10,0xc9,0xe4,
 0xfb,0xff,0xff,0x1a,0x07,0x00,0x5c,0xe1,
 0xd3,0xff,0xff,0x3a,0xc1,0xff,0xff,0xea,
 0x01,0x10,0xa0,0xe3,0x01,0x00,0x5a,0xe1,
 0x01,0x00,0xdc,0x94,0x0a,0x10,0x41,0x90,
 0x1b,0xba,0x80,0x91,0x08,0xa0,0xa0,0x93,
 0x1b,0xb1,0xa0,0xe1,0x01,0xa0,0x4a,0xe0,
 0x2b,0x04,0xb0,0xe1,0xff,0xb0,0x0b,0xe2,
 0x0e,0xf0,0xa0,0xe1,0x01,0xdc,0x4d,0xe2,
 0x0d,0x00,0xa0,0xe1,0x01,0x40,0xa0,0xe3,
 0x0f,0x00,0x00,0xef,0x00,0x10,0x9d,0xe5,
 0x0d,0x20,0xa0,0xe1,0x01,0x30,0xd0,0xe4,
 0x01,0x10,0x51,0xe2,0x01,0x30,0xc2,0xe4,
 0xfb,0xff,0xff,0x5a,0x0d,0x10,0xa0,0xe1,
 0xb4,0x01,0x1f,0xe5,0x05,0x00,0x00,0xef
 };
	//
	//
	//

	unsigned char fxe1_crt0_bin [FXE1_CRT0_SIZE] = {0};	// 444



unsigned char fxe2_crt0_bin [FXE2_CRT0_SIZE] = {	// 708
 0x0e,0x00,0x00,0xea,0x00,0x00,0x00,0x0c,
 0xe8,0x02,0x00,0x0c,0xe8,0x02,0x00,0x0c,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x11,0x00,0x45,0x44,
 0x11,0x00,0x45,0x44,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x10,0x00,0x1f,0xe5,0x10,0x10,0x1f,0xe5,
 0x03,0x20,0xa0,0xe3,0x07,0x00,0x2d,0xe9,
 0x0d,0x00,0xa0,0xe1,0x00,0x00,0x51,0xe3,
 0x0d,0x00,0x00,0x1f,0x05,0x00,0xa0,0xe3,
 0x0b,0x00,0x00,0xef,0x03,0x80,0xc0,0xe3,
 0x64,0xb0,0x1f,0xe5,0x60,0x90,0x1f,0xe5,
 0x0b,0xb0,0x49,0xe0,0x04,0xa0,0x39,0xe5,
 0x04,0xb0,0x5b,0xe2,0x04,0xa0,0x28,0x15,
 0xfb,0xff,0xff,0x1a,0x58,0x90,0x1f,0xe5,
 0x08,0x00,0x98,0xe4,0x04,0x00,0x89,0xe4,
 0x1e,0xdd,0x4d,0xe2,0x04,0xc0,0x48,0xe2,
 0xb2,0x80,0xdc,0xe0,0x01,0x10,0x88,0xe2,
 0x01,0x08,0x51,0xe3,0x83,0x00,0x00,0x0a,
 0xb2,0xb0,0xdc,0xe0,0xb2,0x10,0xdc,0xe0,
 0x10,0xa0,0xa0,0xe3,0x0b,0xb8,0x81,0xe1,
 0x08,0x80,0x8c,0xe0,0x03,0x20,0xa0,0xe3,
 0x10,0x30,0xa0,0xe3,0x0d,0x40,0xa0,0xe1,
 0x43,0x00,0x00,0xeb,0x00,0x50,0xa0,0xe3,
 0x00,0x60,0x94,0xe5,0x03,0x10,0xa0,0xe3,
 0x36,0x00,0x00,0xeb,0x00,0x18,0x85,0xe1,
 0x04,0x10,0x86,0xe4,0x01,0x50,0x85,0xe2,
 0x03,0x00,0x55,0xe1,0xf8,0xff,0xff,0x3a,
 0x46,0x00,0x00,0xeb,0x04,0x20,0xa0,0xe3,
 0x5e,0x3f,0xa0,0xe3,0x01,0x30,0x83,0xe2,
 0x90,0x40,0x8d,0xe2,0x34,0x00,0x00,0xeb,
 0x00,0x50,0xa0,0xe3,0x00,0x60,0x94,0xe5,
 0x0d,0x20,0xa0,0xe1,0x1c,0x00,0x00,0xeb,
 0x02,0x08,0x85,0xe1,0x04,0x00,0x86,0xe4,
 0x01,0x50,0x85,0xe2,0x03,0x00,0x55,0xe1,
 0xf8,0xff,0xff,0x3a,0x37,0x00,0x00,0xeb,
 0x78,0x50,0x43,0xe2,0x90,0x20,0x8d,0xe2,
 0x13,0x00,0x00,0xeb,0x01,0x0c,0x52,0xe3,
 0xd3,0xff,0xff,0x0a,0x01,0x20,0xc9,0x34,
 0xf9,0xff,0xff,0x3a,0x05,0x20,0x42,0xe0,
 0x07,0x10,0x12,0xe2,0x01,0x30,0xa0,0xe3,
 0x13,0x31,0x83,0xe0,0x15,0x00,0x00,0x1b,
 0x00,0x30,0x83,0x10,0xa2,0x11,0xb0,0xe1,
 0x01,0x40,0xa0,0xe3,0x14,0x41,0xa0,0x11,
 0x10,0x00,0x00,0x1b,0x00,0x40,0x84,0x10,
 0x04,0x10,0x59,0xe7,0x01,0x30,0x53,0xe2,
 0x01,0x10,0xc9,0xe4,0xfb,0xff,0xff,0x1a,
 0xe9,0xff,0xff,0xea,0x04,0x70,0x92,0xe4,
 0x08,0x10,0x92,0xe4,0x01,0x00,0x5b,0xe1,
 0xfc,0xff,0xff,0x8a,0xb2,0x10,0x52,0xe1,
 0xb4,0x20,0x52,0xe1,0x20,0x00,0x61,0xe2,
 0x3b,0x00,0xa0,0xe1,0x02,0x00,0x80,0xe0,
 0x00,0x08,0xa0,0xe1,0x20,0x27,0x97,0xe7,
 0x20,0x00,0x61,0xe2,0x01,0xa0,0x5a,0xe0,
 0x3b,0x00,0xa0,0xe1,0x1b,0xb1,0xa0,0xe1,
 0xb2,0x10,0xdc,0xd0,0x00,0xa0,0x6a,0xd2,
 0x11,0xba,0x8b,0xd1,0x10,0xa0,0x7a,0xd2,
 0x0e,0xf0,0xa0,0xe1,0x1c,0x40,0x2d,0xe9,
 0x04,0x10,0xa0,0xe1,0x04,0x40,0x84,0xe2,
 0x08,0x00,0xa0,0xe3,0x10,0x42,0x84,0xe0,
 0x00,0x50,0xa0,0xe3,0x04,0x50,0x84,0xe4,
 0x00,0x40,0x81,0xe5,0x01,0x00,0xa0,0xe3,
 0x10,0x02,0x80,0xe0,0x00,0x08,0xa0,0xe1,
 0x03,0x01,0x84,0xe7,0x1c,0x80,0xbd,0xe8,
 0x10,0x40,0x2d,0xe9,0x00,0x50,0xa0,0xe3,
 0x04,0x20,0x94,0xe4,0x05,0x01,0x92,0xe7,
 0x05,0x61,0x82,0xe0,0x04,0x10,0x36,0xe5,
 0x00,0x00,0x51,0xe1,0x04,0x10,0x86,0x85,
 0xfb,0xff,0xff,0x8a,0x04,0x00,0x86,0xe5,
 0x01,0x50,0x85,0xe2,0x03,0x00,0x55,0xe1,
 0xf5,0xff,0xff,0x3a,0x00,0x50,0xa0,0xe3,
 0x03,0x00,0x55,0xe1,0x03,0x00,0x00,0x2a,
 0x05,0x11,0x92,0xe7,0x21,0x18,0xb0,0xe1,
 0x01,0x50,0x85,0x02,0xf9,0xff,0xff,0x0a,
 0x05,0x61,0x82,0xe0,0x00,0x20,0xa0,0xe3,
 0x00,0x70,0xe0,0xe3,0xb2,0x00,0xd6,0xe1,
 0xb6,0x10,0xd6,0xe1,0x00,0x10,0x51,0xe0,
 0x05,0x00,0x00,0xda,0x37,0xe0,0xa0,0xe1,
 0x72,0xe0,0x8e,0xe1,0x04,0xe0,0x84,0xe4,
 0x02,0xe0,0x45,0xe0,0xb2,0xe0,0xc4,0xe0,
 0xb2,0x00,0xc4,0xe0,0x01,0x20,0x82,0xe2,
 0x12,0x21,0xa0,0xc1,0x01,0x50,0x85,0xe2,
 0x04,0x00,0x96,0xe4,0x03,0x00,0x55,0xe1,
 0x27,0x08,0x00,0xe0,0x04,0x00,0x06,0xe5,
 0xed,0xff,0xff,0x3a,0x10,0x80,0xbd,0xe8,
 0x0d,0x00,0xa0,0xe1,0x01,0x40,0xa0,0xe3,
 0x0f,0x00,0x00,0xef,0x00,0x10,0x9d,0xe5,
 0x0d,0x20,0xa0,0xe1,0x01,0x30,0xd0,0xe4,
 0x01,0x10,0x51,0xe2,0x01,0x30,0xc2,0xe4,
 0xfb,0xff,0xff,0x5a,0x0d,0x10,0xa0,0xe1,
 0xb4,0x02,0x1f,0xe5,0x05,0x00,0x00,0xef
  };


	//
	//
	//
#if 1
	unsigned char FXEheader [] = {
	 0x66,0x78,0x65,0x20,0x00,0x00,0x00,0x00,
	 0x54,0x04,0x00,0x00,0x6c,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x2a,0x2a,0x53,0x74,
	 0x6f,0x6e,0x65,0x43,0x72,0x61,0x63,0x6b,
	 0x65,0x72,0x2a,0x2a,0x02,0x4a,0x2a,0x4a,
	 0x2a,0x4a,0x2a,0x4a,0x2a,0x4a,0x2a,0x4a,
	 0x2a,0x4a,0x2a,0x4a,0x2a,0x4a,0x2a,0x4a,
	 0x2a,0x4a,0x2a,0x4a,0x2a,0x4a,0x2a,0x4a,
	 0x2a,0x4e,0x2a,0x2a,0x06,0x02,0x05,0x02,
	 0x06,0x02,0x05,0x02,0x06,0x02,0x05,0x02,
	 0x06,0x01,0x02,0x06,0x01,0x06,0x01,0x06,
	 0x02,0x05,0x02,0x06,0x01,0x02,0x05,0x02,
	 0x06,0x01,0x02,0x4a,0x01,0x4a,0xff,0xff,
	 0xff,0xff,0xff,0xff,0xb9,0x35,0x55,0x55,
	 0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,
	 0x55,0x59,0x55,0x99,0xdf,0xff,0xff,0xff,
	 0xff,0xff,0x06,0x2a,0x06,0x2a,0xff,0xff,
	 0xff,0xff,0xff,0xff,0xdf,0x75,0x55,0x4d,
	 0x29,0x25,0x45,0x25,0x25,0x45,0x29,0x4d,
	 0x51,0x75,0x79,0x75,0x79,0xda,0xff,0xff,
	 0xff,0xff,0x02,0x4a,0x02,0x2a,0xff,0xff,
	 0xff,0xff,0xff,0xff,0xda,0x4d,0x24,0x25,
	 0x49,0x72,0x92,0x92,0x96,0x96,0x6e,0x49,
	 0x25,0x49,0x51,0x99,0x99,0x99,0xba,0xff,
	 0xff,0xff,0x06,0x2a,0x02,0x2a,0xff,0xff,
	 0xff,0xff,0xff,0xb6,0x29,0x25,0x4a,0x72,
	 0x97,0x96,0xb7,0xb7,0xb7,0xbb,0xdb,0xdb,
	 0xb6,0x6d,0x25,0x4d,0x95,0x99,0x9a,0xda,
	 0xff,0xff,0x02,0x4a,0x06,0x2a,0xff,0xdb,
	 0xda,0xdb,0x92,0x25,0x25,0x4e,0x73,0x92,
	 0x92,0x97,0xb6,0xba,0xbb,0xda,0xdb,0xdb,
	 0xdf,0xdb,0x96,0x45,0x4d,0x99,0xba,0xba,
	 0xde,0xff,0x06,0x2a,0x02,0x4a,0xbb,0xb6,
	 0xdb,0x92,0x24,0x25,0x4f,0x52,0x72,0x96,
	 0x97,0xb6,0xbb,0xdb,0xdb,0xdb,0xdb,0xff,
	 0xdb,0xdb,0xff,0xb6,0x45,0x4d,0xba,0xba,
	 0xda,0xff,0x02,0x4a,0x02,0x2a,0x96,0xb7,
	 0x92,0x25,0x25,0x2e,0x4e,0x72,0x92,0x93,
	 0xb6,0xb7,0xba,0xdb,0xdf,0xfb,0xdf,0xff,
	 0xff,0xff,0xdb,0xdf,0xb6,0x25,0x91,0xde,
	 0xda,0xfe,0x06,0x2a,0x06,0x4a,0x92,0x92,
	 0x49,0x25,0x2a,0x2e,0x4e,0x72,0x97,0x96,
	 0xb7,0x96,0x92,0x91,0x92,0xba,0xfb,0xff,
	 0xff,0xff,0xff,0xff,0xdb,0x92,0x25,0xba,
	 0xda,0xdf,0x02,0x4a,0x02,0x2a,0x92,0x72,
	 0x25,0x2a,0x2e,0x2e,0x4e,0x72,0x97,0x92,
	 0x6d,0x25,0x25,0x25,0x24,0xb6,0xff,0xff,
	 0xff,0xff,0xdf,0xff,0xdb,0xba,0x49,0x91,
	 0xff,0xfe,0x06,0x2a,0x06,0x2a,0x72,0x49,
	 0x25,0x2a,0x2a,0x2e,0x4e,0x72,0x92,0x49,
	 0x24,0x24,0x25,0x24,0x49,0xdb,0xff,0xff,
	 0xff,0xff,0xff,0xfb,0xdf,0xdb,0x6e,0x49,
	 0xdb,0xff,0x02,0x4a,0x02,0x2a,0x6e,0x25,
	 0x29,0x2e,0x2a,0x2e,0x52,0x72,0x49,0x25,
	 0x25,0x24,0x25,0x24,0x49,0xda,0xff,0xff,
	 0xff,0xff,0xff,0xff,0xdb,0xdb,0x96,0x49,
	 0xda,0xff,0x06,0x2a,0x06,0x2a,0x4e,0x25,
	 0x2a,0x2e,0x2a,0x2a,0x52,0x4e,0x25,0x24,
	 0x25,0x25,0x24,0x25,0x25,0xb6,0xff,0xff,
	 0xff,0xdb,0xff,0xdf,0xdb,0xdb,0xb6,0x49,
	 0xb6,0xff,0x02,0x4a,0x02,0x2a,0x49,0x25,
	 0x4a,0x2e,0x2a,0x2e,0x4e,0x49,0x25,0x25,
	 0x24,0x25,0x25,0x25,0x24,0x45,0x92,0xb6,
	 0xb6,0x91,0xda,0xfb,0xdb,0xbb,0xb6,0x25,
	 0x92,0xff,0x06,0x2a,0x06,0x2a,0x2a,0x25,
	 0x4e,0x2e,0x2a,0x2e,0x4e,0x49,0x24,0x24,
	 0x25,0x24,0x25,0x24,0x25,0x24,0x24,0x25,
	 0x25,0x49,0xdb,0xdb,0xdb,0xbb,0xb7,0x49,
	 0x8d,0xfa,0x02,0x4a,0x02,0x4a,0x29,0x25,
	 0x4e,0x2e,0x2a,0x2a,0x2e,0x29,0x25,0x25,
	 0x25,0x25,0x49,0x25,0x24,0x25,0x25,0x25,
	 0x24,0x49,0xda,0xdb,0xba,0xb7,0x96,0x29,
	 0x85,0xe9,0x06,0x2a,0x06,0x2a,0x2a,0x45,
	 0x4e,0x4e,0x2e,0x2a,0x2a,0x49,0x25,0x24,
	 0x49,0x92,0x96,0x6d,0x25,0x24,0x25,0x24,
	 0x25,0x6d,0xb7,0xbb,0xb7,0xb7,0x92,0x29,
	 0x84,0xe5,0x02,0x4a,0x02,0x2a,0x29,0x25,
	 0x4a,0x52,0x2a,0x2a,0x2e,0x2a,0x24,0x25,
	 0x4e,0x97,0xb7,0x72,0x25,0x25,0x24,0x25,
	 0x25,0x92,0xbb,0xb6,0xb6,0x97,0x92,0x25,
	 0xa5,0xe4,0x06,0x2a,0x06,0x2a,0x2a,0x25,
	 0x49,0x72,0x4e,0x2a,0x2a,0x2e,0x29,0x25,
	 0x49,0x92,0x96,0x6e,0x24,0x25,0x25,0x24,
	 0x69,0xb7,0xb6,0x97,0x96,0x92,0x4e,0x44,
	 0xc5,0xe4,0x02,0x4a,0x02,0x2a,0x2a,0x29,
	 0x45,0x6e,0x52,0x2e,0x2a,0x2a,0x2a,0x29,
	 0x4a,0x72,0x93,0x4e,0x24,0x25,0x24,0x4a,
	 0x96,0x96,0x97,0x92,0x93,0x72,0x29,0x65,
	 0xc5,0xe4,0x06,0x2a,0x06,0x2a,0x2a,0x2a,
	 0x25,0x49,0x73,0x4e,0x2e,0x2a,0x2e,0x2a,
	 0x2e,0x4e,0x72,0x49,0x25,0x24,0x4e,0x92,
	 0x92,0x73,0x92,0x72,0x72,0x4e,0x25,0xa4,
	 0xe5,0xe5,0x02,0x4a,0x01,0x4a,0x06,0x2a,
	 0x29,0x25,0x6e,0x72,0x4e,0x2e,0x2a,0x2a,
	 0x2a,0x2e,0x2e,0x4a,0x24,0x25,0x4d,0x73,
	 0x72,0x72,0x72,0x52,0x2e,0x25,0x64,0xe5,
	 0xc4,0xf1,0x06,0x2a,0x06,0x2a,0x4e,0x0a,
	 0x2a,0x29,0x45,0x6e,0x72,0x4e,0x2a,0x2e,
	 0x2a,0x2a,0x2e,0x29,0x25,0x24,0x2a,0x4e,
	 0x4e,0x2e,0x4e,0x2a,0x29,0x44,0xc5,0xe5,
	 0xe5,0xf6,0x02,0x4a,0x02,0x2a,0xbb,0x0a,
	 0x2a,0x2a,0x25,0x49,0x6e,0x72,0x4e,0x2e,
	 0x2e,0x2a,0x2a,0x25,0x24,0x25,0x29,0x2e,
	 0x2a,0x2e,0x2e,0x25,0x25,0xa5,0xe5,0xc4,
	 0xf2,0xff,0x06,0x2a,0x01,0x2a,0xff,0x92,
	 0x0a,0x2a,0x29,0x25,0x25,0x4a,0x72,0x72,
	 0x4e,0x4e,0x2f,0x29,0x25,0x24,0x2a,0x2e,
	 0x2a,0x2a,0x25,0x45,0xa4,0xe5,0xe4,0xed,
	 0xfa,0xff,0x02,0x4a,0x02,0x4a,0xff,0xdf,
	 0x72,0x0a,0x2a,0x2a,0x25,0x29,0x25,0x4a,
	 0x4e,0x4e,0x4e,0x29,0x25,0x24,0x29,0x2a,
	 0x29,0x24,0x45,0xa9,0xe5,0xc4,0xe9,0xfb,
	 0xff,0xff,0x06,0x2a,0x06,0x2a,0xff,0xff,
	 0xdb,0x92,0x06,0x0a,0x96,0xd6,0x91,0x49,
	 0x25,0x25,0x25,0x25,0x25,0x24,0x25,0x25,
	 0x65,0xa9,0xc9,0xe4,0xe5,0xe9,0xfa,0xff,
	 0xff,0xff,0x02,0x4a,0x02,0x4a,0xff,0xff,
	 0xff,0xdb,0x96,0x52,0xdb,0xff,0xff,0xda,
	 0xb6,0x91,0x6d,0x69,0x69,0x69,0x89,0xad,
	 0xcd,0xe9,0xe8,0xc5,0xf1,0xfb,0xff,0xff,
	 0xff,0xff,0x06,0x2a,0x06,0x2a,0xff,0xff,
	 0xff,0xff,0xff,0xdf,0xff,0xff,0xff,0xff,
	 0xff,0xfb,0xfa,0xf6,0xd6,0xf6,0xf1,0xf1,
	 0xed,0xe9,0xed,0xf6,0xff,0xff,0xff,0xff,
	 0xff,0xff,0x02,0x4a,0x02,0x2a,0x4a,0x2a,
	 0x4a,0x2a,0x4a,0x2a,0x4a,0x2a,0x4a,0x2a,
	 0x2a,0x4a,0x2a,0x2a,0x4a,0x2a,0x4a,0x2a,
	 0x2a,0x4a,0x2a,0x2a,0x2a,0x4a,0x2a,0x4a,
	 0x2a,0x4a,0x06,0x2a,0x06,0x02,0x05,0x02,
	 0x06,0x02,0x05,0x02,0x02,0x06,0x01,0x06,
	 0x02,0x06,0x01,0x06,0x02,0x05,0x02,0x06,
	 0x02,0x05,0x02,0x06,0x02,0x05,0x02,0x06,
	 0x02,0x05,0x02,0x4a,0x00,0x00,0x00,0x00,
	 0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff
	};
#endif


unsigned char fxe3_crt0_bin [FXE3_CRT0_SIZE] = {
 0x0e,0x00,0x00,0xea,0x00,0x00,0x00,0x0c,
 0x48,0x03,0x00,0x0c,0x48,0x03,0x00,0x0c,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x11,0x00,0x45,0x44,
 0x11,0x00,0x45,0x44,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x10,0x00,0x1f,0xe5,0x10,0x10,0x1f,0xe5,
 0x03,0x20,0xa0,0xe3,0x07,0x00,0x2d,0xe9,
 0x0d,0x00,0xa0,0xe1,0x00,0x00,0x51,0xe3,
 0x0d,0x00,0x00,0x1f,0x05,0x00,0xa0,0xe3,
 0x0b,0x00,0x00,0xef,0x03,0xc0,0xc0,0xe3,
 0x64,0xb0,0x1f,0xe5,0x60,0x90,0x1f,0xe5,
 0x0b,0xb0,0x49,0xe0,0x04,0xa0,0x39,0xe5,
 0x04,0xb0,0x5b,0xe2,0x04,0xa0,0x2c,0x15,
 0xfb,0xff,0xff,0x1a,0x58,0x90,0x1f,0xe5,
 0x08,0x00,0x9c,0xe4,0x04,0x00,0x89,0xe4,
 0x13,0xdc,0x4d,0xe2,0x10,0xa0,0xa0,0xe3,
 0x10,0x00,0x5a,0xe3,0x04,0xc0,0x4c,0x02,
 0x02,0xc0,0x4c,0x12,0xb2,0x80,0xdc,0xe0,
 0x00,0x00,0x58,0xe3,0x99,0x00,0x00,0x0a,
 0xb2,0xb0,0xdc,0xe0,0x10,0xa0,0xa0,0xe3,
 0xb2,0x10,0xdc,0xe0,0x0b,0xb8,0x81,0xe1,
 0x02,0x27,0xa0,0xe3,0x10,0x30,0xa0,0xe3,
 0x0d,0x40,0xa0,0xe1,0x46,0x00,0x00,0xeb,
 0x84,0x60,0x8d,0xe2,0x03,0x10,0xa0,0xe3,
 0x20,0x00,0x61,0xe2,0x3a,0x00,0x00,0xeb,
 0x00,0x18,0x85,0xe1,0x04,0x10,0x86,0xe4,
 0x01,0x50,0x85,0xe2,0x03,0x00,0x55,0xe1,
 0xf7,0xff,0xff,0x3a,0x55,0x00,0x00,0xeb,
 0x0f,0x00,0xa0,0xe3,0xc8,0x70,0x8d,0xe2,
 0x00,0x00,0xc7,0xe7,0x01,0x00,0x50,0xe2,
 0xfc,0xff,0xff,0x5a,0x01,0x26,0xa0,0xe3,
 0x02,0x3c,0xa0,0xe3,0xd8,0x40,0x8d,0xe2,
 0x33,0x00,0x00,0xeb,0x37,0x00,0x00,0xeb,
 0x01,0x3c,0xa0,0xe3,0x97,0x4e,0x8d,0xe2,
 0x2f,0x00,0x00,0xeb,0x33,0x00,0x00,0xeb,
 0xe1,0x4e,0x8d,0xe2,0x2c,0x00,0x00,0xeb,
 0x30,0x00,0x00,0xeb,0xd8,0x20,0x8d,0xe2,
 0x18,0x00,0x00,0xeb,0x01,0x3c,0x52,0xe2,
 0x13,0x00,0x00,0x4a,0xd1,0xff,0xff,0x0a,
 0x01,0x30,0x53,0xe2,0x05,0x30,0xa0,0x01,
 0x06,0x40,0xa0,0x01,0x0c,0x00,0x00,0x0a,
 0x03,0x50,0xa0,0xe1,0x97,0x2e,0x8d,0xe2,
 0x0e,0x00,0x00,0xeb,0x00,0x00,0x52,0xe3,
 0x07,0x40,0xa0,0x01,0x05,0x00,0x00,0x0a,
 0x7f,0x40,0x02,0xe2,0x02,0x00,0x54,0xe1,
 0xe1,0x2e,0x8d,0x12,0x07,0x00,0x00,0x1b,
 0x04,0x44,0x82,0x11,0x04,0x70,0xa0,0x11,
 0x04,0x60,0xa0,0xe1,0x04,0x20,0x59,0xe7,
 0x01,0x30,0x53,0xe2,0x01,0x20,0xc9,0xe4,
 0xfb,0xff,0xff,0x5a,0xe4,0xff,0xff,0xea,
 0x84,0x80,0x82,0xe2,0x08,0x10,0x92,0xe4,
 0x01,0x00,0x5b,0xe1,0xfc,0xff,0xff,0x8a,
 0xb2,0x10,0x52,0xe1,0xb4,0x20,0x52,0xe1,
 0x20,0x00,0x61,0xe2,0x3b,0x20,0x62,0xe0,
 0x02,0x21,0x98,0xe7,0x01,0xa0,0x5a,0xe0,
 0x3b,0x00,0xa0,0xe1,0x1b,0xb1,0xa0,0xe1,
 0xb2,0x10,0xdc,0xd0,0x00,0xa0,0x6a,0xd2,
 0x11,0xba,0x8b,0xd1,0x10,0xa0,0x7a,0xd2,
 0x0e,0xf0,0xa0,0xe1,0x84,0x10,0x84,0xe2,
 0x03,0x21,0x81,0xe7,0x00,0x50,0xa0,0xe3,
 0x04,0x50,0x01,0xe5,0x0e,0xf0,0xa0,0xe1,
 0x04,0x40,0x2d,0xe9,0x00,0x50,0xa0,0xe3,
 0x84,0x60,0x84,0xe2,0x08,0x20,0x8d,0xe2,
 0xe4,0xff,0xff,0xeb,0x02,0x00,0xa0,0xe1,
 0x02,0x20,0xd7,0xe7,0x00,0x70,0x87,0xe0,
 0x00,0x00,0x50,0xe3,0x01,0x10,0x57,0xc5,
 0x01,0x00,0x40,0xc2,0x01,0x10,0x47,0xc4,
 0xfa,0xff,0xff,0xca,0x00,0x20,0xc7,0xe5,
 0x02,0x08,0x85,0xe1,0x05,0x01,0x86,0xe7,
 0x01,0x50,0x85,0xe2,0x03,0x00,0x55,0xe1,
 0xef,0xff,0xff,0x3a,0x04,0x40,0xbd,0xe8,
 0x9c,0x40,0x2d,0xe9,0x00,0x50,0xa0,0xe3,
 0x84,0x20,0x84,0xe2,0x05,0x01,0x92,0xe7,
 0x05,0x61,0x82,0xe0,0x04,0x10,0x36,0xe5,
 0x00,0x00,0x51,0xe1,0x04,0x10,0x86,0x85,
 0xfb,0xff,0xff,0x8a,0x04,0x00,0x86,0xe5,
 0x01,0x50,0x85,0xe2,0x03,0x00,0x55,0xe1,
 0xf5,0xff,0xff,0x3a,0x00,0x50,0xa0,0xe3,
 0x03,0x00,0x55,0xe1,0x9c,0x80,0xbd,0x28,
 0x05,0x11,0x92,0xe7,0x21,0x18,0xb0,0xe1,
 0x01,0x50,0x85,0x02,0xf9,0xff,0xff,0x0a,
 0x00,0x60,0xa0,0xe3,0x05,0x30,0x43,0xe0,
 0x05,0x11,0x92,0xe7,0x01,0x50,0x85,0xe2,
 0x06,0x11,0x82,0xe7,0x01,0x60,0x86,0xe2,
 0x03,0x00,0x56,0xe1,0xf9,0xff,0xff,0x9a,
 0x00,0x50,0xa0,0xe3,0x00,0x60,0xa0,0xe3,
 0x00,0x70,0xe0,0xe3,0xb2,0x00,0xd2,0xe1,
 0xb6,0x10,0xd2,0xe1,0x00,0x10,0x51,0xe0,
 0x05,0x00,0x00,0xda,0x37,0xe0,0xa0,0xe1,
 0x76,0xe0,0x8e,0xe1,0x04,0xe0,0x84,0xe4,
 0x05,0xe0,0x46,0xe0,0xb2,0xe0,0xc4,0xe0,
 0xb2,0x00,0xc4,0xe0,0x01,0x60,0x86,0xe2,
 0x16,0x61,0xa0,0xc1,0x01,0x50,0x85,0xe2,
 0x04,0x00,0x92,0xe4,0x03,0x00,0x55,0xe1,
 0x27,0x08,0x00,0xe0,0x04,0x00,0x02,0xe5,
 0xed,0xff,0xff,0x3a,0x9c,0x80,0xbd,0xe8,
 0x0d,0x00,0xa0,0xe1,0x01,0x40,0xa0,0xe3,
 0x0f,0x00,0x00,0xef,0x00,0x10,0x9d,0xe5,
 0x0d,0x20,0xa0,0xe1,0x01,0x30,0xd0,0xe4,
 0x01,0x10,0x51,0xe2,0x01,0x30,0xc2,0xe4,
 0xfb,0xff,0xff,0x5a,0x0d,0x10,0xa0,0xe1,
 0x14,0x03,0x1f,0xe5,0x05,0x00,0x00,0xef
};


}
